# -*- coding: utf-8 -*-
"""Tempo real

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fYEPcAzCH261RQZm2sLcxRt-BGFJZK_q

# Imagem em tempo real
"""

import cv2
import numpy as np
from RASP.rasp import GPIOmanager
from image_detector import ImageDetector

# Variáveis para armazenar as dimensões da área branca
width = 160  # Largura da área branca em mm
height = 196  # Altura da área branca em mm

GPIO = GPIOmanager(width,height)
DETECTOR = ImageDetector(width,height)

iteration_counter = 0
values = []
conversion_fails = 0

# Captura o vídeo da câmera
cap = cv2.VideoCapture(0)

# Aguarda o usuário pressionar a tecla 's'
while True:
    ret, frame = cap.read()
    cv2.imshow('Pressione "s" para iniciar', frame)

    if cv2.waitKey(1) & 0xFF == ord('s'):
        break
        
while True:
    # Lê o frame do vídeo
    ret, frame = cap.read()

    if not ret:
        break

    center_x_mm, center_y_mm, frame = DETECTOR.retrieveCoordinates(frame)
    cv2.imshow(frame,"detected")
    print("Coordenadas do centro da maior área vermelha:")
    print(f"{center_x_mm}, {center_y_mm}")
    if not(values):
        values.append((center_x_mm,center_y_mm))
        iteration_counter =+ 1
    else:
        print("x",center_x_mm - values[-1][0])
        print("y",center_y_mm - values[-1][1])
        if abs((center_x_mm - values[-1][0]) < 10) and (abs(center_y_mm-values[-1][0] < 10)):
            values.append((center_x_mm,center_y_mm))    
            iteration_counter +=1
    print(iteration_counter)
    if True:#iteration_counter == 5:
        final_center_x_mm = values[-1][0]
        final_center_y_mm = values[-1][1]
        print(final_center_x_mm,final_center_x_mm)
        GPIO.update_dc(final_center_x_mm,final_center_y_mm)
        conversion_fails=0
        while True:
            ret, frame = cap.read()
            if cv2.waitKey(1) & 0xFF == ord('s'):
                cv2.imshow('Pressione "s" para iniciar', frame)
                iteration_counter == 0
                values.clear()
                break
    
    conversion_fails +=1
    
    if conversion_fails >= 11:
        conversion_fails = 0
        iteration_counter = 0
        values.clear()
        


    # Mostra a imagem original com a área branca e a maior área vermelha encontradas destacadas
    cv2.imshow('Camera', frame)

    # Verifica se a tecla 'q' foi pressionada para encerrar o loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Libera a captura da câmera e fecha as janelas
cap.release()
cv2.destroyAllWindows()